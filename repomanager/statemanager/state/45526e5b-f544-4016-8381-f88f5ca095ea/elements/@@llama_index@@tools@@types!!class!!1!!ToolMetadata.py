class ToolMetadata:
    description: str
    name: Optional[str] = None
    fn_schema: Optional[Type[BaseModel]] = DefaultToolFnSchema

    @property
    def fn_schema_str(self) -> str:
        """Get fn schema as string."""
        if self.fn_schema is None:
            raise ValueError("fn_schema is None.")
        return str(self.fn_schema.schema())

    def get_name(self) -> str:
        """Get name."""
        if self.name is None:
            raise ValueError("name is None.")
        return self.name

    @deprecated(
        "Deprecated in favor of `to_openai_tool`, which should be used instead."
    )
    def to_openai_function(self) -> Dict[str, Any]:
        """Deprecated and replaced by `to_openai_tool`.

        The name and arguments of a function that should be called, as generated by the
        model.
        """
        return self.to_openai_tool()

    def to_openai_tool(self) -> Dict[str, Any]:
        """To OpenAI tool."""
        if self.fn_schema is None:
            parameters = {
                "properties": {
                    "input": {"title": "input query string", "type": "string"},
                },
                "required": ["input"],
                "type": "object",
            }
        else:
            parameters = self.fn_schema.schema()

        return {
            "type": "function",
            "function": {
                "name": self.name,
                "description": self.description,
                "parameters": parameters,
            },
        }
